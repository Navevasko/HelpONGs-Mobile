{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ContainerModal from \"../ContainerModal\";\nimport PropTypes from \"prop-types\";\nimport { styles } from \"./style\";\nimport APICEP from \"../../../api/Controllers/cepController\";\nimport { cepMask, numberMask } from \"../../utils/mask\";\nimport InputUnderline from \"../InputUnderline\";\nimport { theme } from \"../../global/styles/theme\";\nimport FullButton from \"../FullButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ModalEndereco(_ref) {\n  var onClose = _ref.onClose,\n      setData = _ref.setData;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      cep = _useState2[0],\n      setCEP = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      estado = _useState4[0],\n      setEstado = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cidade = _useState6[0],\n      setCidade = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      bairro = _useState8[0],\n      setBairro = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rua = _useState10[0],\n      setRua = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      numero = _useState12[0],\n      setNumero = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      complemento = _useState14[0],\n      setComplemento = _useState14[1];\n\n  var onSubmit = function onSubmit() {\n    if (cep != \"\" && estado != \"\" && cidade != \"\" && bairro != \"\" && rua != \"\") {\n      return {\n        Bairro: bairro,\n        Cep: cep,\n        Cidade: cidade,\n        Complemento: complemento,\n        Estado: estado,\n        Rua: rua,\n        Numero: numero\n      };\n    } else {\n      ToastAndroid.show(\"TESTE\", ToastAndroid.SHORT);\n      return;\n    }\n  };\n\n  var handleAPICEP = function handleAPICEP(cep) {\n    var response;\n    return _regeneratorRuntime.async(function handleAPICEP$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(cep != \"\")) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(APICEP.get(cep));\n\n          case 3:\n            response = _context.sent;\n            setBairro(response.bairro);\n            setCEP(response.cep);\n            setComplemento(response.complemento);\n            setCidade(response.localidade);\n            setRua(response.logradouro);\n            setEstado(response.uf);\n            console.log(response);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(Modal, {\n    transparent: true,\n    animationType: \"slide\",\n    children: _jsxs(ContainerModal, {\n      onClose: onClose,\n      title: \"Endere√ßo\",\n      publish: false,\n      children: [_jsxs(ScrollView, {\n        style: styles.containerInput,\n        children: [_jsx(InputUnderline, {\n          placeholder: \"CEP\",\n          keyboardType: \"number-pad\",\n          value: cepMask(cep),\n          onChangeText: function onChangeText(text) {\n            setCEP(text);\n          },\n          onEndEditing: function onEndEditing() {\n            handleAPICEP(cep);\n          },\n          max: 9,\n          borderColor: theme.colors.primary\n        }), _jsxs(View, {\n          style: {\n            marginTop: 30,\n            minHeight: 450,\n            justifyContent: \"space-evenly\"\n          },\n          children: [_jsx(InputUnderline, {\n            placeholder: \"Estado\",\n            keyboardType: \"number-pad\",\n            value: estado,\n            onChangeText: function onChangeText(text) {\n              setEstado(text);\n            },\n            max: 2,\n            borderColor: theme.colors.primary\n          }), _jsx(InputUnderline, {\n            placeholder: \"Cidade\",\n            keyboardType: \"number-pad\",\n            value: cidade,\n            onChangeText: function onChangeText(text) {\n              setCidade(text);\n            },\n            borderColor: theme.colors.primary\n          }), _jsx(InputUnderline, {\n            placeholder: \"Bairro\",\n            value: bairro,\n            onChangeText: function onChangeText(text) {\n              setBairro(text);\n            },\n            borderColor: theme.colors.primary\n          }), _jsx(InputUnderline, {\n            placeholder: \"Rua\",\n            value: rua,\n            onChangeText: function onChangeText(text) {\n              setRua(text);\n            },\n            borderColor: theme.colors.primary\n          }), _jsx(InputUnderline, {\n            placeholder: \"N\\xFAmero\",\n            value: numberMask(numero),\n            keyboardType: \"number-pad\",\n            onChangeText: function onChangeText(text) {\n              setNumero(text);\n            },\n            borderColor: theme.colors.primary\n          }), _jsx(InputUnderline, {\n            placeholder: \"Complemento\",\n            value: complemento,\n            onChangeText: function onChangeText(text) {\n              setComplemento(text);\n            },\n            borderColor: theme.colors.primary\n          })]\n        })]\n      }), _jsx(FullButton, {\n        text: \"Salvar\",\n        backColor: theme.colors.primary,\n        onPress: function onPress() {\n          var enderecoArray = onSubmit();\n\n          if (enderecoArray) {\n            setData(enderecoArray);\n            onClose();\n          }\n        }\n      })]\n    })\n  });\n}\nModalEndereco.propTypes = {\n  onClose: PropTypes.func,\n  setData: PropTypes.func\n};","map":{"version":3,"sources":["/Users/suporte/Desktop/HelpONGs (MOBILE)/src/components/ModalEndereco/index.jsx"],"names":["React","useState","ContainerModal","PropTypes","styles","APICEP","cepMask","numberMask","InputUnderline","theme","FullButton","ModalEndereco","onClose","setData","cep","setCEP","estado","setEstado","cidade","setCidade","bairro","setBairro","rua","setRua","numero","setNumero","complemento","setComplemento","onSubmit","Bairro","Cep","Cidade","Complemento","Estado","Rua","Numero","ToastAndroid","show","SHORT","handleAPICEP","get","response","localidade","logradouro","uf","console","log","containerInput","text","colors","primary","marginTop","minHeight","justifyContent","enderecoArray","propTypes","func"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Modal, ScrollView, ToastAndroid, View } from \"react-native\";\nimport ContainerModal from \"../ContainerModal\";\nimport PropTypes from \"prop-types\";\nimport { styles } from \"./style\";\nimport APICEP from \"../../../api/Controllers/cepController\";\nimport { cepMask, numberMask } from \"../../utils/mask\";\nimport InputUnderline from \"../InputUnderline\";\nimport { theme } from \"../../global/styles/theme\";\nimport FullButton from \"../FullButton\";\n\nexport default function ModalEndereco({ onClose, setData }) {\n  const [cep, setCEP] = useState(\"\");\n  const [estado, setEstado] = useState(\"\");\n  const [cidade, setCidade] = useState(\"\");\n  const [bairro, setBairro] = useState(\"\");\n  const [rua, setRua] = useState(\"\");\n  const [numero, setNumero] = useState(\"\");\n  const [complemento, setComplemento] = useState(\"\");\n\n  const onSubmit = () => {\n    if (\n      cep != \"\" &&\n      estado != \"\" &&\n      cidade != \"\" &&\n      bairro != \"\" &&\n      rua != \"\"\n    ) {\n      return {\n        Bairro: bairro,\n        Cep: cep,\n        Cidade: cidade,\n        Complemento: complemento,\n        Estado: estado,\n        Rua: rua,\n        Numero: numero,\n      };\n    } else {\n      ToastAndroid.show(\"TESTE\", ToastAndroid.SHORT);\n      return;\n    }\n  };\n\n  const handleAPICEP = async (cep) => {\n    if (cep != \"\") {\n      let response = await APICEP.get(cep);\n\n      setBairro(response.bairro);\n      setCEP(response.cep);\n      setComplemento(response.complemento);\n      setCidade(response.localidade);\n      setRua(response.logradouro);\n      setEstado(response.uf);\n\n      console.log(response);\n    }\n  };\n\n  return (\n    <Modal transparent={true} animationType={\"slide\"}>\n      <ContainerModal onClose={onClose} title={\"Endere√ßo\"} publish={false}>\n        <ScrollView style={styles.containerInput}>\n          <InputUnderline\n            placeholder=\"CEP\"\n            keyboardType={\"number-pad\"}\n            value={cepMask(cep)}\n            onChangeText={(text) => {\n              setCEP(text);\n            }}\n            onEndEditing={() => {\n              handleAPICEP(cep);\n            }}\n            max={9}\n            borderColor={theme.colors.primary}\n          />\n\n          <View\n            style={{\n              marginTop: 30,\n              minHeight: 450,\n              justifyContent: \"space-evenly\",\n            }}\n          >\n            <InputUnderline\n              placeholder=\"Estado\"\n              keyboardType={\"number-pad\"}\n              value={estado}\n              onChangeText={(text) => {\n                setEstado(text);\n              }}\n              max={2}\n              borderColor={theme.colors.primary}\n            />\n            <InputUnderline\n              placeholder=\"Cidade\"\n              keyboardType={\"number-pad\"}\n              value={cidade}\n              onChangeText={(text) => {\n                setCidade(text);\n              }}\n              borderColor={theme.colors.primary}\n            />\n            <InputUnderline\n              placeholder=\"Bairro\"\n              value={bairro}\n              onChangeText={(text) => {\n                setBairro(text);\n              }}\n              borderColor={theme.colors.primary}\n            />\n            <InputUnderline\n              placeholder=\"Rua\"\n              value={rua}\n              onChangeText={(text) => {\n                setRua(text);\n              }}\n              borderColor={theme.colors.primary}\n            />\n\n            <InputUnderline\n              placeholder=\"N√∫mero\"\n              value={numberMask(numero)}\n              keyboardType={\"number-pad\"}\n              onChangeText={(text) => {\n                setNumero(text);\n              }}\n              borderColor={theme.colors.primary}\n            />\n\n            <InputUnderline\n              placeholder=\"Complemento\"\n              value={complemento}\n              onChangeText={(text) => {\n                setComplemento(text);\n              }}\n              borderColor={theme.colors.primary}\n            />\n          </View>\n        </ScrollView>\n        <FullButton\n          text=\"Salvar\"\n          backColor={theme.colors.primary}\n          onPress={() => {\n            const enderecoArray = onSubmit();\n            if (enderecoArray) {\n              setData(enderecoArray);\n              onClose();\n            }\n          }}\n        />\n      </ContainerModal>\n    </Modal>\n  );\n}\n\nModalEndereco.propTypes = {\n  onClose: PropTypes.func,\n  setData: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}